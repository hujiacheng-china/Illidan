# Sets the minimum version of CMake required to build the native
# library. You should either keep the default value or only pass a
# value of 3.4.0 or lower.

cmake_minimum_required(VERSION 3.4.1)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds it for you.
# Gradle automatically packages shared libraries with your APK.

add_library( native-lib
             SHARED
             src/main/cpp/native-lib.cpp)
add_library( helloworld
             SHARED
             src/main/cpp/helloworld.c)

#------------动态方式加载 stringutil-lib是libxxxx.so的xxxx部分
add_library(mtimage-jni SHARED IMPORTED)
#------------设置要连接的so的相对路径，${ANDROID_ABI}表示so文件的ABI类型的路径,这一步引入了动态加入编译的so
set_target_properties(mtimage-jni PROPERTIES IMPORTED_LOCATION lib/jni/${ANDROID_ABI}/libmtimage-jni.so)

# Searches for a specified prebuilt library and stores the path as a
# variable. Because system libraries are included in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in the
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( native-lib ${log-lib} )

target_link_libraries( helloworld ${log-lib} )
